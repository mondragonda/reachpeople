#!/bin/bash

echo -e "\nCreate React App Component Generator\n"

SRC_DIR=$(pwd)"/src"

if [[ ! -d $SRC_DIR ]];
then
    echo "The project /src directory was not found"
    exit 1
fi

echo -e "Project /src directory at: $SRC_DIR\n"

echo "The script will generate Component.tsx, Component.test.tsx (Jest) and Component.module.scss (CSS Modules with SASS) files for a component name passed as argument."

echo "
    If you want to create a subcomponent from an existing main component enter the name as: [MainComponent.SubComponent] (e.g., Header.SignUpButton).
    When using sub-component name syntax you expect the following output:

    ParentComponentName
        |__ParentComponentName.tsx
        |__ParentComponentName.test.tsx
        |__ParentComponentName.module.scss
        |__SubComponentName
            |__SubComponentName.tsx
            |__SubComponentName.test.tsx
            |__SubComponentName.module.scss

    Only one level of deepness is supported.
"

scaffold()
{
    FILE_EXTENSIONS=(tsx test.tsx module.scss)
    FILE_BLUEPRINTS=("\
        //Component file autogenerated by Create React App Component Generator.\nimport React from 'react';\n\nconst $1: React.FC = (): JSX.Element => {\treturn (<section></section>);\t};\n\nexport default $1;
        " "
        //Component test file autogenerated by Create React App Component Generator.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport $1 from './$1';\nconst document = window.document;
        \n\nit('renders without crashing', () => {\n
                \tconst div = document.createElement('<section></section>');\n
                \tReactDOM.render(<$1 />, div);\n
                \tReactDOM.unmountComponentAtNode(div);\n
        });
    " "//CSS component module file autogenerated by Create React App Component Generator.\n.$1 {}")
    
    echo
    
    if [[ ! -d $1 ]];
    then
        echo -e "Directory for $1 does not exist. It will be created.\n"
        mkdir $1
    fi
    
    pushd $1 &>/dev/null
    
    for EXTENSION in ${!FILE_EXTENSIONS[@]}; do
        FILE_NAME=$1.${FILE_EXTENSIONS[$EXTENSION]}
        if [[ -e $FILE_NAME ]];
        then
            echo "$FILE_NAME already exists, omitting it."
            continue
        fi
        echo -e ${FILE_BLUEPRINTS[$EXTENSION]} > $FILE_NAME
        echo "$FILE_NAME was created."
    done
}

COMPONENT=""

while [[ -z $COMPONENT ]]; do
    echo -n "Please type the name of the component: "
    read COMPONENT
done

if [[ -d $SRC_DIR ]]
then
    echo -e "The necessary files for \"$COMPONENT\" component will be created.\n"
    pushd $SRC_DIR &>/dev/null
    
    MAIN_COMPONENT=${COMPONENT%.*}
    SUB_COMPONENT=${COMPONENT##*.}
    
    if [[ $MAIN_COMPONENT != $SUB_COMPONENT ]];
    then
        scaffold $MAIN_COMPONENT
        scaffold $SUB_COMPONENT
    else
        scaffold $COMPONENT
    fi
    
    dirs -c
    exit 0
fi


